{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/Constants.js",
    "src/ConstantsKey.js",
    "src/index.js",
    "src/objects/Character.js",
    "src/objects/Controls.js",
    "src/objects/InformationString.js",
    "src/objects/MapManager.js",
    "src/states/Commands.js",
    "src/states/MainMenu.js",
    "src/states/MainView.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "export const Width = 1024;\nexport const Height = 576;\nexport const Size = 32;\nexport const CursorLength = 3;\nexport const CursorSize = CursorLength * Size;\nexport const WidthSpriteSheetHero = 64;\nexport const HeightSpriteSheetHero = 96;\nexport const HeroRatio = 0.75;\n\nexport const TextPosition = 55;\n\nexport const TextColor = \"#8cc169\";\n\n\nexport const Code = \"9356\";\nexport const StyleRef = { font: \"bold 8px Arial\", fill: \"#000\", boundsAlignH: \"center\", boundsAlignV: \"middle\" };\nexport const Style = { font: \"bold 18px Arial\", fill: \"#fff\", boundsAlignH: \"center\", boundsAlignV: \"middle\" };\n\nexport const BackgroundColor = 0x212A43\n\nexport const HudText = \"Gems : \";\nexport const HudTextX = 10;\nexport const HudTextY = 540;\n",
    "export const Tileset = {\n  path: \"tileset.png\",\n  key: \"tileset\"\n  };\n\nexport const Level1 = {\n  path: \"LVL_1.json\",\n  key: \"Test\",\n  lastLayer: 3,\n  text: \"\",\n  playerPosition: {x: 64, y: 352}\n};\n\nexport const Level2 = {\n  path: \"LVL_6.json\",\n  key: \"Test\",\n  lastLayer: 3,\n  text: \"\",\n  playerPosition: {x: 64, y: 20}\n};\n\nexport const Level3 = {\n  path: \"LVL_2.json\",\n  key: \"Test\",\n  lastLayer: 2,\n  text: \"The gap seems too large. You might want to use your power\",\n  playerPosition: {x: 64, y: 352}\n};\n\nexport const Level4 = {\n  path: \"LVL_7.json\",\n  key: \"Test\",\n  lastLayer: 2,\n  text: \"\",\n  playerPosition: {x: 64, y: 20}\n};\n\n\nexport const Level5 = {\n  path: \"LVL_3.json\",\n  key: \"Test\",\n  lastLayer: 2,\n  text: \"A layer can help you, but it could stop you too. Press B to rollback.\",\n  playerPosition: {x: 64, y: 352}\n};\n\nexport const Level6 = {\n  path: \"LVL_4.json\",\n  key: \"Test\",\n  lastLayer: 1,\n  text: \"You may need to remove more than one layer\",\n  playerPosition: {x: 64, y: 352}\n};\n\n\nexport const Levels = {\n  Level1,\n  Level2,\n  Level3,\n  Level4,\n  Level5,\n  Level6\n};\n\nexport const HeroSprite = {\n  key: \"hero\",\n  path: \"hero.png\"\n}",
    "import MainView from 'states/MainView';\nimport MainMenu from 'states/MainMenu';\nimport Commands from 'states/Commands';\nimport { Width, Height } from  \"./Constants.js\"\n\nclass Game extends Phaser.Game {\n\n  constructor() {\n    super(Width, Height, Phaser.AUTO, 'content', null);\n    this.currentLevel = 1;\n    this.state.add('MainMenu', MainMenu, false);\n    this.state.add('MainView', MainView, false);\n    this.state.add('Commands', Commands, false);\n    this.state.start('MainMenu');\n  }\n\n  goToMainGame() {\n     this.state.start('MainView');\n  }\n\n  goToCommands() {\n    this.state.start('Commands');\n  }\n\n  goToMenu() {\n    this.state.start('MainMenu');\n    this.currentLevel = 1;\n  }\n\n\n  reset() {\n    this.state.start('MainView', Phaser.Plugin.StateTransition.In.ScaleUp, Phaser.Plugin.StateTransition.Out.SlideBottom, true, true, this.currentLevel);\n  }\n\n  nextLevel() {\n    this.currentLevel++;\n    this.state.start('MainView', Phaser.Plugin.StateTransition.In.SlideLeft, null, true, true, this.currentLevel);\n  }\n}\n\nnew Game();\n",
    "import { HeroRatio } from \"../Constants.js\";\nconst LimitY = 550;\nconst TimeLapse = 10;\n\nclass Character extends Phaser.Sprite {\n\n  constructor(game, x, y, key, frame) {\n    super(game, x, y, key, frame);\n    //Enable physics on the player\n    game.physics.arcade.enable(this);\n    this.body.bounce.x = this.body.bounce.y = 0;\n\n    this.upKey = game.input.keyboard.addKey(this.game.controls.getKey(\"jump\"));\n    this.leftKey = game.input.keyboard.addKey(this.game.controls.getKey(\"left\"));\n    this.rightKey = game.input.keyboard.addKey(this.game.controls.getKey(\"right\"));\n\n    this.locked = true;\n    this.body.gravity.y = 0;\n    const fn = () => {\n      this.body.gravity.y = 750;\n      this.locked = false;\n    };\n    setTimeout(fn, 500);\n    const leftArray = [0,1,2,3,4,5,6,8,9,10,11,12,13,14,15];\n    const rightArray = [31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16];\n    const JumpArrayRight = [64,65,66];\n    const JumpArrayLeft = [80, 81,82];\n    const PowerLeft = [48,48,48,48];\n    const PowerRight = [32,32,32,32];\n    const IdleRight = [96,97,98,99,100,101,102,103,104,105,106,107,108, 109, 110];\n    const IdleLeft = [128,129,130,131, 132,133,134,135,136,137,138,139,140,141,142];\n    this.scale.setTo(HeroRatio, HeroRatio);\n\n    this.animations.add('jumpLeft', JumpArrayLeft, TimeLapse, true);\n    this.animations.add('jumpRight', JumpArrayRight, TimeLapse, true);\n    this.animations.add('left', rightArray, TimeLapse, true);\n    this.animations.add('right', leftArray, TimeLapse, true);\n    this.animations.add('powerLeft', PowerLeft, TimeLapse, true);\n    this.animations.add('powerRight', PowerRight, TimeLapse, true);\n    this.animations.add('idleRight', IdleRight, TimeLapse, true);\n    this.animations.add('idleLeft', IdleLeft, TimeLapse, true);\n    this.direction = 1;\n  }\n\n  update() {\n    if(this.locked) {\n      this.body.velocity.x = 0;\n      return;\n    }\n\n    if (this.leftKey.isDown) {\n        this.body.velocity.x = -200;\n        this.animations.play(\"left\", TimeLapse);\n        this.direction = -1;\n    }\n    else if (this.rightKey.isDown) {\n        this.body.velocity.x = 200;\n        this.animations.play(\"right\", TimeLapse);\n        this.direction = 1;\n    } else {\n      this.body.velocity.x = 0;\n    }\n\n    // Make the player jump if he is touching the ground\n    if (this.upKey.isDown && this.body.onFloor()) {\n      this.body.velocity.y = -225;\n      if(this.body.velocity.x === 0) {\n        if(this.direction === -1) {\n          this.animations.play(\"jumpLeft\", TimeLapse);\n        } else {\n          this.animations.play(\"jumpRight\", TimeLapse);\n        }\n      }\n    }\n\n    if(this.body.velocity.x == 0 && this.body.velocity.y == 0){\n      if (this.direction == -1) {\n        this.animations.play(\"idleLeft\", TimeLapse);\n      } else {\n        this.animations.play(\"idleRight\", TimeLapse);\n      }\n      //this.frame = this.direction ===  1 ? 0 : 29;\n    }\n  }\n\n  isDeath() {\n    if (!this.body) {\n      return false;\n    }\n    return this.body.position.y > LimitY;\n  }\n\n  eraseBlocksAnimation(cursor) {\n    if(this.x < cursor.x) {\n      this.frame = 32;\n      this.direction = 1;\n      //this.animations.play('powerLeft', TimeLapse);\n    } else {\n      this.frame = 48;\n      this.direction = -1;\n      //this.animations.play('powerRight', TimeLapse);\n    }\n  }\n}\n\nexport default Character;",
    "const Actions = [\"left\", \"right\", \"jump\", \"moveLeftCursor\", \"moveRightCursor\", \"moveDownCursor\", \"moveUpCursor\", \"undoLayer\", \"removeLayer\"];\n\nclass Controls {\n  constructor(controlsSettings = {}, actionList = Actions) {\n    this.controlsSettings = controlsSettings;\n    this.actionList = actionList;\n    this.isQwerty = true;\n  };\n\n  getKey(action) {\n    if(!this.controlsSettings[action]) {\n      console.error(`cannot find ${action} in the action list`);\n    }\n    return this.controlsSettings[action];\n  }\n\n  addControls(params) {\n    Object.keys(params).forEach(action => this.addControl(params[action], action));\n  }\n\n  qwertyKeyboard() {\n    return {\n      \"left\" : Phaser.Keyboard.A,\n      \"right\" : Phaser.Keyboard.D,\n      \"jump\" : Phaser.Keyboard.W,\n      \"undoLayer\" : Phaser.Keyboard.SPACEBAR,\n      \"removeLayer\" : Phaser.Keyboard.SHIFT\n    }\n  }\n\n  azertyKeyBoard() {\n    return {\n      \"left\" : Phaser.Keyboard.Q,\n      \"right\" : Phaser.Keyboard.D,\n      \"jump\" : Phaser.Keyboard.Z,\n      \"undoLayer\" : Phaser.Keyboard.SPACEBAR,\n      \"removeLayer\" : Phaser.Keyboard.SHIFT\n    }\n  }\n\n  injectPropsDueToKeyboardType() {\n    if(!this.isQwerty) {\n      return this.azertyKeyBoard();\n    }\n    return this.qwertyKeyboard();\n  }\n\n  defaultConfig() {\n    const defaultConfigParams = {\n        \"moveLeftCursor\" : Phaser.Keyboard.A,\n        \"moveRightCursor\" : Phaser.Keyboard.D,\n        \"moveDownCursor\": Phaser.Keyboard.S,\n        \"moveUpCursor\" : Phaser.Keyboard.W,\n      };\n      this.addControls(defaultConfigParams);\n  }\n\n  PostMortemDefaultConfig() {\n    let defaultConfigParams = {\n        \"moveLeftCursor\" : Phaser.Keyboard.LEFT,\n        \"moveRightCursor\" : Phaser.Keyboard.RIGHT,\n        \"moveDownCursor\": Phaser.Keyboard.DOWN,\n        \"moveUpCursor\" : Phaser.Keyboard.UP,\n      };\n\n      defaultConfigParams = Object.assign({}, defaultConfigParams, this.injectPropsDueToKeyboardType());\n      this.addControls(defaultConfigParams);\n  }\n\n  // // { {ref: pointer, action: left key: Z}}\n  // setUpControl(params) {\n\n  //   this.keyUndoLayer = this.game.input.keyboard.addKey(Phaser.Keyboard.B);\n  //   this.keyUndoLayer.onDown.add(this.undoBlockKeyboard, this);\n  // }\n\n  addControl(key, action) {\n    if(!this.actionList.includes(action)) {\n      console.error(`the action named '${action}' does not exist`);\n    }\n    this.controlsSettings[action] = key;\n  }\n\n  toggleKeyboardType() {\n    this.isQwerty = !this.isQwerty;\n    this.PostMortemDefaultConfig();\n  }\n\n  export() {\n    return this.controlsSettings;\n  }\n\n\n\n}\nexport default Controls;",
    "import { TextPosition , Style, Height, Width } from '../Constants.js';\n\nconst Timer = 5000;\n\nclass InformationString extends Phaser.Text {\n\n  constructor(game, x, text, timer = Timer) {\n    super(game, x, TextPosition, text, Style);\n    game.input.keyboard.addCallbacks(this, null, null, this.keyPress);\n    this.anchor.set(0.5);\n    this.visible = false;\n    this.timer = timer;\n\n    if(text.length !== 0) {\n      this.bar = game.add.graphics();\n      this.bar.beginFill(0x000000, 0.2);\n      this.bar.drawRect(0, 0, Width, 80);\n    }\n  }\n\n  blink() {\n    const fn = () => {\n      this.visible  = false;\n      if(this.bar) this.bar.destroy();\n    };\n    setTimeout(fn, this.timer);\n    this.visible = true;\n  }\n\n}\n\nexport default InformationString;",
    "import { CursorLength } from '../Constants.js';\n\nconst LengthAnimation = 50;\nconst MaxLayer = 3;\n\nclass MapManager {\n\n  constructor(map, lastLayerAvailable) {\n    this.removedBlock = [];\n    this.cacheCollisionLayer = [];\n    this.lastLayerAvailable = lastLayerAvailable;\n    this.map = map;\n    this.nbGems = 0;\n    this.currentGems = 0;\n    this.doorSprites = [];\n    this.visibleDoor = false;\n  }\n\n  findLayerToDestroy(x, y, lengthX, lengthY) {\n    //layer can be deleted 3 and 2\n    let layerIndex = MaxLayer;\n    for(let index = MaxLayer; index > 1; index--) {\n      if( this.map.getTile(x, y, index) === null &&\n          this.map.getTile(x + lengthX-1, y + lengthY-1, index) === null) {\n        layerIndex--;\n      } else {\n        break;\n      }\n    }\n    //impossibe\n    if(layerIndex <= 1 ||  layerIndex <= this.lastLayerAvailable) {\n      return -1;\n    }\n    return layerIndex;\n  }\n\n  setUpCollisionLayer(colissionLayer) {\n    colissionLayer.layer.data.forEach(column => {\n      column.forEach(tile => {\n        if(tile.properties.layer_index && tile.properties.layer_index != MaxLayer) {\n          this.cacheCollisionLayer.push(tile);\n          this.map.removeTile(tile.x, tile.y, \"colissionLayer\");\n         }\n         if(tile.properties.layer_index) {\n            tile.alpha = 0;\n         }\n\n         if(tile.properties.is_gem == 1) {\n          this.nbGems++;\n          if(tile.properties.layer_index == MaxLayer) {\n            tile.alpha = 1;\n          } else {\n            tile.alpha = 0;\n          }\n        }\n\n        if(tile.properties.portal == 1) {\n          this.doorSprites.push(tile);\n          tile.alpha = 0;\n        }\n      });\n    });\n  }\n\n  eraseBlock(x, y) {\n    const lengthY = CursorLength;\n    const lengthX = CursorLength;\n    //check the layers associated to the deletion;\n    let objectsRemoves = [];\n    let indexRemoval = 0;\n    const layerIndex = this.findLayerToDestroy(x, y, lengthX, lengthY);\n    //cannot destroy\n    if(layerIndex == -1) {\n      return;\n    }\n\n    for(let xAxis = x; xAxis < x + lengthX; xAxis++) {\n      for(let yAxis = y; yAxis < y + lengthY; yAxis++) {\n        this.handleCollisionBlockOnErase(xAxis, yAxis, layerIndex);\n\n        const fn = () => {\n          const tile = this.map.removeTile(xAxis, yAxis, layerIndex);\n          objectsRemoves.push(tile);\n        }\n        setTimeout(fn, indexRemoval * LengthAnimation);\n        indexRemoval++;\n        if(indexRemoval > CursorLength) {\n          indexRemoval = 0;\n        }\n      }\n    }\n    this.removedBlock.push({tiles: objectsRemoves, layerIndex: layerIndex, x, y});\n    this.removedBlock.sort(this.sortByLayerIndex);\n  }\n\n  handleCollisionBlockOnErase(x,y, layerIndex) {\n    let collidedTile = this.map.getTile(x, y, \"colissionLayer\");\n    if(collidedTile && collidedTile.properties) {\n      if(collidedTile.properties.layer_index >= layerIndex) {\n        this.cacheCollisionLayer.push(collidedTile);\n        this.map.removeTile(x, y, \"colissionLayer\")\n      }\n    } else{\n      //dont find the tile in the layer, so the tile might be in the deleted tiles\n      let indexRemoveCollisionBlock = 0;\n      const tileToInsert = this.cacheCollisionLayer.find((tile, index) => {\n        indexRemoveCollisionBlock = index;\n        return tile.x === x && tile.y === y;\n      });\n      if(!tileToInsert) {\n        return;\n      }\n      if(tileToInsert.properties.layer_index == layerIndex - 1) {\n        let newTile = this.map.putTile(tileToInsert, tileToInsert.x, tileToInsert.y, \"colissionLayer\");\n        //copy property\n        newTile.properties = Object.assign({}, tileToInsert.properties);\n        if(!newTile.properties.is_gem) {\n          newTile.alpha = 0;\n        }\n        this.cacheCollisionLayer.splice(indexRemoveCollisionBlock, 1);\n      }\n    }\n  }\n\n  handleCollisionBlockOnUndo(x,y, layerIndex) {\n    let collidedTile = this.map.getTile(x, y, \"colissionLayer\");\n    if(collidedTile && collidedTile.properties) {\n      //remove collision block\n      if(collidedTile.properties.layer_index < layerIndex) {\n        this.cacheCollisionLayer.push(collidedTile);\n        this.map.removeTile(x, y, \"colissionLayer\")\n      }\n    } else {\n      //dont find the tile in the layer, so the tile might be in the deleted tiles\n      let indexRemoveCollisionBlock = 0;\n      const tileToInsert = this.cacheCollisionLayer.find((tile, index) => {\n        indexRemoveCollisionBlock = index;\n        return tile.x === x && tile.y === y;\n      });\n      if(!tileToInsert) {\n        return;\n      }\n      if(tileToInsert.properties.layer_index == layerIndex) {\n        let newTile = this.map.putTile(tileToInsert, tileToInsert.x, tileToInsert.y, \"colissionLayer\");\n        //copy property\n        newTile.properties = Object.assign({}, tileToInsert.properties);\n        if(!newTile.properties.is_gem) {\n          newTile.alpha = 0;\n        }\n        this.cacheCollisionLayer.splice(indexRemoveCollisionBlock, 1);\n      }\n    }\n  }\n\n  sortByLayerIndex(a, b) {\n    return a.layerIndex > b.layerIndex;\n  }\n\n  undoBlock(x, y) {\n    const lengthX = CursorLength;\n    const lengthY = CursorLength;\n    const redoElements = this.removedBlock.find(list => list.x === x && list.y === y );\n    if(redoElements) {\n      let indexRemoval = CursorLength;\n      redoElements.tiles.forEach(tile => {\n        this.handleCollisionBlockOnUndo(tile.x, tile.y, redoElements.layerIndex)\n        let collidedTile = this.map.getTile(tile.x, tile.y, \"colissionLayer\");\n        if(collidedTile) {\n          collidedTile.isVisible = collidedTile.isVisible ? false : true;\n        }\n        const fn = () => {\n          this.map.putTile(tile, tile.x, tile.y, redoElements.layerIndex);\n        };\n        setTimeout(fn, indexRemoval * LengthAnimation);\n        indexRemoval--;\n        if(indexRemoval < 0) {\n          indexRemoval = CursorLength;\n        }\n      });\n      //remove the element after\n      const newArray = this.removedBlock.filter(elmt => elmt !== redoElements);\n      this.removedBlock = newArray.sort(this.sortByLayerIndex);\n    }\n  }\n\n  killGem() {\n    this.currentGems++;\n    if(this.nbGems === this.currentGems) {\n      this.showDoor();\n    }\n  }\n\n  portalEnable() {\n    return this.visibleDoor;\n  }\n\n  showDoor() {\n    this.visibleDoor = true;\n    this.doorSprites.forEach((tile, index) => {\n      tile.alpha = 1;\n    });\n  }\n\n}\n\nexport default MapManager;",
    "import { BackgroundColor, TextColor } from \"../Constants.js\";\nimport Controls from \"../objects/Controls\";\n\nclass Commands extends Phaser.State {\n\n  create() {\n    this.game.stage.setBackgroundColor(BackgroundColor);\n    const aimText = \"Mouse cursor / Arrow keys\";\n    const eraseLayer =  \"Spacebar\";\n\n    let group = this.game.add.group();\n    const button = this.game.make.button(800, 20, 'button', this.switchKeyboard, this, 2, 1, 0);\n    this.textInfo = this.game.add.text(870, 90, \"Qwerty\", { font: \"bold 14px Arial\", fill: \"#8cc169\", stroke: '#4D4D4D',strokeThickness: 1 });\n    group.add(button);\n\n    this.game.add.text(350, 25, \"Commands\", { font: \"bold 52px Arial\", fill: \"#8cc169\", stroke: '#4D4D4D',strokeThickness: 1 });\n\n    this.game.add.text(50, 125, \"Move\", { font: \"bold 32px Arial\", fill: TextColor });\n    this.moveText = this.game.add.text(500, 125, \"\", { font: \"bold 32px Arial\", fill: TextColor });\n\n    this.game.add.text(50, 200, \"Jump\", { font: \"bold 32px Arial\", fill: TextColor });\n    this.jumpText = this.game.add.text(500, 200, \"\", { font: \"bold 32px Arial\", fill: TextColor });\n\n    this.game.add.text(50, 275, \"Aim\", { font: \"bold 32px Arial\", fill: TextColor });\n    this.game.add.text(500, 275, aimText, { font: \"bold 32px Arial\", fill: TextColor });\n\n    this.game.add.text(50, 350, \"Swith to inner layer\", { font: \"bold 32px Arial\", fill: TextColor });\n    this.game.add.text(500, 350, eraseLayer, { font: \"bold 32px Arial\", fill: TextColor });\n\n    this.game.add.text(50, 425, \"Rollback to previous layer\", { font: \"bold 32px Arial\", fill: TextColor });\n    this.game.add.text(500, 425, \"Shift\", { font: \"bold 32px Arial\", fill: TextColor });\n\n    this.game.add.text(350, 525, \"Press enter to start\", { font: \"bold 34px Arial\", fill: TextColor });\n\n    this.enterButton = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);\n    this.game.input.gamepad.start();\n\n    let controls = new Controls();\n    controls.PostMortemDefaultConfig();\n    this.game.controls = controls;\n  }\n\n  update() {\n    if(this.enterButton.isDown) {\n      this.game.goToMainGame();\n    }\n\n    if(this.game.controls.isQwerty) {\n      this.moveText.setText(\"A / D keys\");\n      this.jumpText.setText(\"W key\");\n    } else {\n      this.moveText.setText(\"Q / D keys\");\n      this.jumpText.setText(\"S key\");\n    }\n  }\n\n  preload() {\n    this.game.load.spritesheet('button', \"res/button_sprite_sheet.png\", 193, 71);\n  }\n\n  switchKeyboard() {\n    this.game.controls.toggleKeyboardType();\n    const text = this.game.controls.isQwerty ? \"Qwerty\" : \"Azerty\";\n    this.textInfo.setText(text);\n  }\n\n}\n\nexport default Commands;\n",
    "import { BackgroundColor, TextColor } from \"../Constants.js\";\n\nclass MainMenu extends Phaser.State {\n\n  create() {\n    this.game.stage.setBackgroundColor(BackgroundColor);\n    this.game.add.sprite(20,500, \"LD\");\n    this.game.add.sprite(0,0, \"background\");\n    this.game.add.text(350, 400, \"Press enter to start\", { font: \"bold 34px Arial\", fill: TextColor });\n    this.game.add.text(700, 530, \"Thanks for playing ! :)\", { font: \"bold 19px Arial\", fill: TextColor })\n    this.enterButton = this.game.input.keyboard.addKey(Phaser.Keyboard.ENTER);\n  }\n\n  preload() {\n    this.game.load.image(\"LD\", \"res/LD.png\");\n    this.game.load.image(\"background\", \"res/menu.png\");\n  }\n\n  update() {\n    if(this.enterButton.isDown) {\n      this.game.goToCommands();\n    }\n  }\n\n}\n\nexport default MainMenu;\n",
    "import { WidthSpriteSheetHero, HeightSpriteSheetHero, Size, CursorSize, Width, Height, HudText, HudTextX, HudTextY } from '../Constants.js';\nimport { Tileset, Level1, Levels, HeroSprite } from '../ConstantsKey.js';\nimport Character from 'objects/Character';\nimport InformationString from 'objects/InformationString';\n\nimport MapManager from \"objects/MapManager\";\nimport Controls from \"objects/Controls\";\n\nclass MainView extends Phaser.State {\n\n  constructor() {\n    super();\n  }\n\n  init(indexLevel) {\n    this.indexLevel = indexLevel || 1;\n    this.hasLevel = Object.keys(Levels).length >= this.indexLevel;\n    if(!this.game.controls) {\n      let controls = new Controls();\n      controls.PostMortemDefaultConfig();\n      this.game.controls = controls;\n    }\n    //no more levels :|\n  }\n\n  create() {\n    if(!this.hasLevel) {\n      this.game.goToMenu();\n    } else {\n\n      this.game.physics.startSystem(Phaser.Physics.ARCADE);\n      // Add the physics engine to all game objects\n      this.game.world.enableBody = true;\n\n      this.map = this.game.add.tilemap(Levels[`Level${this.indexLevel}`].key);\n      this.map.addTilesetImage(Levels[`Level${this.indexLevel}`].key, Tileset.key);\n\n\n      this.map.createLayer('thirdLayer');\n      this.map.createLayer('secondLayer');\n      this.map.createLayer('firstLayer');\n      // This resizes the game world to match the layer dimensions\n      this.collisionLayer = this.map.createLayer('colissionLayer');\n      this.map.setCollisionByExclusion([], true, this.collisionLayer);\n\n      this.collisionLayer.resizeWorld();\n\n      this.hero = new Character(this.game, Levels[`Level${this.indexLevel}`].playerPosition.x , Levels[`Level${this.indexLevel}`].playerPosition.y, HeroSprite.key, 0);\n      this.game.add.existing(this.hero);\n      this.game.camera.follow(this.hero);\n\n      this.marker = null;\n      this.createTileSelector();\n      this.game.input.addMoveCallback(this.updateMarker, this);\n\n      this.mapManager = new MapManager(this.map, Levels[`Level${this.indexLevel}`].lastLayer);\n      this.mapManager.setUpCollisionLayer(this.collisionLayer);\n\n      this.text = new InformationString(this.game, Width/2, Levels[`Level${this.indexLevel}`].text );\n      this.game.add.existing(this.text);\n      this.text.blink();\n\n      this.hud = this.game.add.text(400, 400, HudText, { font: \"bold 22px Arial\", fill: '#FFFFFF' });\n      this.hud.x = this.game.camera.x + HudTextX;\n      this.hud.y = this.game.camera.y + HudTextY;\n\n      this.keyRemoveLayer = this.game.input.keyboard.addKey(this.game.controls.getKey(\"undoLayer\"));\n      this.keyRemoveLayer.onDown.add(this.eraseBlockKeyboard, this);\n      this.keyUndoLayer = this.game.input.keyboard.addKey(this.game.controls.getKey(\"removeLayer\"));\n      this.keyUndoLayer.onDown.add(this.undoBlockKeyboard, this);\n\n      this.keyUpLayer = this.game.input.keyboard.addKey(this.game.controls.getKey(\"moveUpCursor\"));\n      this.keyUpLayer.onDown.add(this.moveUp, this);\n      this.keyDownLayer = this.game.input.keyboard.addKey(this.game.controls.getKey(\"moveDownCursor\"));\n      this.keyDownLayer.onDown.add(this.moveDown, this);\n      this.keyLeftLayer = this.game.input.keyboard.addKey(this.game.controls.getKey(\"moveLeftCursor\"));\n      this.keyLeftLayer.onDown.add(this.moveLeft, this);\n      this.keyRightLayer = this.game.input.keyboard.addKey(this.game.controls.getKey(\"moveRightCursor\"));\n      this.keyRightLayer.onDown.add(this.moveRight, this);\n\n      this.game.time.advancedTiming = true;\n    }\n  }\n\n\n  update() {\n    this.game.physics.arcade.collide(this.hero, this.collisionLayer, this.additionalCheck, this.hasPortal , this);\n    if(this.hero.y > Height + this.hero.height) {\n      this.game.reset();\n    }\n\n    this.updateGui();\n  }\n\n  updateGui() {\n    this.hud.setText(HudText + this.mapManager.currentGems + \" / \" + this.mapManager.nbGems);\n    this.hud.x = this.game.camera.x + HudTextX;\n    this.hud.y = this.game.camera.y + HudTextY;\n\n  }\n\n  hasPortal(tile1, tile2) {\n    if(tile2.properties && tile2.properties.portal == 1 && !this.mapManager.portalEnable()) {\n      return false;\n    }\n    return true;\n  }\n\n  additionalCheck(tile1, tile2) {\n    if(!tile2.properties) {\n      return;\n    }\n\n    if(tile2.properties.is_gem == 1) {\n      this.map.removeTile(tile2.x, tile2.y, \"colissionLayer\").destroy();\n      this.mapManager.killGem();\n      return;\n    }\n\n    if(tile2.properties.portal == 1 && this.mapManager.portalEnable()) {\n      //maybe make an animation\n      this.game.nextLevel();\n    }\n  }\n\n  preload() {\n    this.game.load.spritesheet(HeroSprite.key, `res/${HeroSprite.path}`, WidthSpriteSheetHero, HeightSpriteSheetHero);\n    this.game.load.image(Tileset.key, `res/${Tileset.path}`);\n    if(this.hasLevel) {\n      this.game.load.tilemap(Levels[`Level${this.indexLevel}`].key, `res/${Levels[`Level${this.indexLevel}`].path}` , null, Phaser.Tilemap.TILED_JSON);\n    }\n  }\n\n  render() {\n    //this.game.debug.text(this.game.time.fps, 2, 16, \"#00ff00\");\n  }\n\n  eraseBlockKeyboard() {\n    this.mapManager.eraseBlock(this.marker.x / Size, this.marker.y / Size);\n    this.hero.eraseBlocksAnimation(this.marker);\n  }\n\n  undoBlockKeyboard() {\n    this.mapManager.undoBlock(this.marker.x / Size, this.marker.y / Size);\n    this.hero.eraseBlocksAnimation(this.marker);\n  }\n\n  updateMarker() {\n    this.marker.x = this.game.math.snapToFloor(this.game.input.activePointer.worldX, CursorSize, 0);\n    this.marker.y = this.game.math.snapToFloor(this.game.input.activePointer.worldY, CursorSize, 0);\n\n    if (this.game.input.mousePointer.isDown && this.marker.y > Size) {\n      this.mapManager.eraseBlock(this.marker.x / Size, this.marker.y / Size);\n      this.hero.eraseBlocksAnimation(this.marker);\n    }\n  }\n\n  createTileSelector() {\n    //Our painting marker\n    this.marker = this.game.add.graphics();\n    this.marker.lineStyle(2, 0xea4335, 1);\n    this.marker.drawRect(0, 0, CursorSize, CursorSize);\n    this.marker.x = 4 * CursorSize;\n    this.marker.y = 4 * CursorSize;\n  }\n\n  moveUp() {\n    this.marker.y -= CursorSize;\n    if(this.marker.y < 0) {\n      this.marker.y = 0;\n    }\n  }\n\n  moveDown() {\n    this.marker.y += CursorSize;\n    if(this.marker.y > Height - CursorSize) {\n      this.marker.y = Height - CursorSize;\n    }\n  }\n\n  moveLeft() {\n    this.marker.x -= CursorSize;\n    if(this.marker.x < 0) {\n      this.marker.x = 0;\n    }\n  }\n\n  moveRight() {\n    this.marker.x += CursorSize;\n    if(this.marker.x > Width - CursorSize) {\n      this.marker.x = Width - CursorSize;\n    }\n  }\n\n}\n\nexport default MainView;\n"
  ]
}